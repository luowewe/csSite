---
title: 2022-10-31 strings
---

{% extends 'code-assessment.njk' %}

{% block instructions %}
<p>
  <svg id="close"
       class="bi"><use xlink:href="/img/bootstrap-icons.svg#caret-down-fill"/></svg>
  This assessment consists of <b><span id="num-questions"></span>
    functions</b> you need to write involving primarily string expressions. It
  is a <b>closed book assessment</b>. You should stay on this tab until you
  are done and there should be no talking. This assessment is about how
  much <i>you</i> understand. There are no automatic tests but you can use
  the REPL to test things yourself. For example, after defining
  the <code>firstHalf</code> function and pressing the blue arrow, you can
  type <code>firstHalf('foobar')</code> in the repl and hit return to see if
  it evaluates to the expected <code>'foo'</code>.
</p>

<p>
  You can move through the questions with the arrows at the upper right next
  to the <b>1 of <span class="of"></span></b> indicator so if you're not
  sure how to write one function move on to another one and come back if you
  have time at the end. I want to see how much you do know. <b>Note</b>: you
  can also click on <code>thingsLikeThis</code> in these instructions and
  the questions to copy them to the clipboard to avoid spelling mistakes.
  (I.e. click to copy and then ⌘-v to paste wherever you want.)
</p>

<p>
  Some of these functions will be much easier (even trivial) to write if you
  use the <code>indexOf</code> method I introduced on the latest string
  functions assignment. To refresh your memory, <code>indexOf</code> takes a
  single argument, which should be a string, and returns the index at which
  the sting argument first occurres in the string on which the method is
  called. It returns -1 if the argument string is not found. For instance
  if <code>s</code> is our old standby <code>"foobar"</code>
  then <code>s.indexOf("bar")</code> is <code>3</code>.
</p>

<p>
  <b>When you are done</b>, please click on your Github username above and
  submit a GitHub pull request of the branch <code id="branch-name"></code>
  and request me as a reviewer. Doing this correctly is part of the
  assessment. <b>If you are unsure how to request a review, please ask for
    help!</b>
</p>
{% endblock %}

{% block questions %}
<!-- from original cumulative assessment -->

<div>
  <p>
    Write a function named <code>firstHalf</code> that takes a single
    string argument and returns the first half of the string. (If the
    string has an odd number of characters it doesn't matter whether or
    not you include the extra character.) For instance the first half
    of <code>'foobar'</code> is <code>'foo'</code> but if the argument
    was <code>'fooquux'</code> then either <code>'foo'</code>
    or <code>'fooq'</code> would be acceptable return values.
  </p>
</div>

<div>
  <p>
    Write a function named <code>secondHalf</code> that takes a single
    string argument and returns the second half of the string. (If the
    string has an odd number of characters it doesn't matter whether or
    not you include the extra character.) For instance the second half
    of <code>'foobar'</code> is <code>'bar'</code> but if the argument
    was <code>'fooquux'</code> then either <code>'quux'</code>
    or <code>'uux'</code> would be acceptable return values. For maximum
    style points write this function and <code>firstHalf</code> so
    that <code>firstHalf(s) + secondHalf(s)</code> gives you
    back <code>s</code>.
  </p>
</div>

<div>
  <p>
    Write a function named <code>upDown</code> that takes a single
    string argument and returns a string consisting of the original
    string all in upper case concatenated (“smooshed together”) with the
    string all in lower case. E.g. called with <code>'foo'</code> it
    should return <code>'FOOfoo'</code>.
  </p>
</div>

<div>
  <p>
    Write a function named <code>firstFewEveryOther</code> that takes a
    single string argument that is at least five characters long and
    returns a string consisting of just the first, third, and fifth
    characters of the argument string. E.g. called
    with <code>'foobar'</code> it should return <code>'foa'</code>.
  </p>
</div>

<div>
  <p>
    Write a function named <code>upDownLastCharacter</code> that takes a
    single string argument that is at least one character long and
    returns a string consisting of two characters, the uppercase version
    of the last character of the argument string and the lowercase
    version of that same character. E.g. called with <code>'foo'</code>
    it should return <code>'Oo'</code>.
  </p>
</div>

<!-- from booleans and strings -->

<div>
  <p>
    Write a function named <code>firstAndLast</code> that takes a single
    string argument (which will be at least two characters long) and
    returns a string consisting of just the first and last characters of
    the string.
  </p>
</div>

<div>
  <p>
    Write a function named <code>swapFrontAndBack</code> that takes a
    single string argument and returns a string consisting of the second
    half of the original string followed by the first half. If the
    string is an odd number of characters it doesn’t matter whether the
    extra character goes with the front or the back.
  </p>
</div>

<div>
  <p>
    As you should recall from the Pig Latin assignment, the rules of
    simple Pig Latin say that a word is translated into Pig Latin by
    taking everything up to (but not including) the first vowel and moving
    it to the end of word and then adding “ay” to the end.
  </p>

  <p>
    Write a function named <code>simplePigLatin</code> that takes two
    arguments, a string containing a single word and a number indicating
    the index of the first vowel in the word, and returns the word
    translated into Pig Latin.
  </p>
</div>

<div>
  <p>
    Write a function named <code>randomCharacter</code> that takes a
    single string argument and returns a random character from the
    string. For this function you will need to use the <code>rand</code>
    function defined at the top of the starter code.
  </p>
</div>

<div>
  <p>
    Write a function named <code>randomCharacterUpDown</code> that takes
    a single string argument and returns a string consisting of a single
    random character repeated twice, once in upper case and then in
    lower case. For this function you will need to use
    the <code>rand</code> function defined at the top of the starter
    code.
  </p>
</div>

<!-- combined -->

<div>
  <p>
    Write a function named <code>isAllUpperCase</code> that takes a
    single string argument and returns a boolean indicating whether the
    string is all upper case.
  </p>
</div>

<div>
  <p>
    Write a function named <code>sameIgnoringCase</code> that takes two
    string arguments and returns a boolean indicating whether they are
    the same string if you ignore case differences.
  </p>
</div>

<!-- new -->

<div>
  <p>Write a function named <code>firstName</code> that takes a single
    string argument which will consist of a full name in the form first
    name, a space, and the last name and returns a string containing just
    the first name. You will probably want to use the <code>indexOf</code>
    method.
  </p>
</div>

<div>
  <p>Write a function named <code>lastName</code> that takes a single
    string argument which will consist of a full name in the form first
    name, a space, and the last name and returns a string containing just
    the last name. You will probably want to use the <code>indexOf</code>
    method.
  </p>
</div>

<div>
  <p>Write a function named <code>initials</code> that takes a single
    string argument which will consist of a full name in the form first
    name, a space, and the last name and returns a string containing the
    person's initials, i.e. the first letter of their first name followed
    by the first letter of their last name. You will probably want to use
    the <code>indexOf</code> method.
  </p>
</div>
{% endblock %}
