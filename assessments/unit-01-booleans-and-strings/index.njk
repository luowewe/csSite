---
title: Unit 1 boolean and strings assessment
---

{% extends 'code-assessment.njk' %}

{% block instructions %}
<p>
  <svg id="close"
       class="bi"><use xlink:href="/img/bootstrap-icons.svg#caret-down-fill"/></svg>
  This assessment consists of <b><span id="num-questions"></span>
    functions</b> you need to write. Five involve boolean expressions, five
  involve string expressions, and the last two a combination. It is
  a <b>closed book assessment</b>. You should stay on this tab until you are
  done and there should be no talking. This assessment is about how
  much <i>you</i> understand. There are no automatic tests but you can use
  the REPL to test things yourself.
</p>

<p>
  You can move through the questions with the arrows at the upper right next to
  the <b>1 of <span class="of"></span></b> indicator so if you’re not sure how
  to write one function move on to another one and come back if you have time at
  the end. I want to see how much you do know. <b>Note</b>: you can also click
  on <code>thingsLikeThis</code> in these instructions and the questions to copy
  them to the clipboard to avoid spelling mistakes.
</p>

<p>
  <b>When you are done</b>, please submit a GitHub pull request of the
  branch <code id="branch-name"></code> and request
  me as a reviewer. Doing this correctly is part of the assessment.
</p>
{% endblock %}

{% block questions %}
<!-- booleans -->

<div>
  <p>
    The BHS fire alarms go off if a fire alarm is pulled, if smoke is detected,
    or if there is a planned fire drill. Write a function
    named <code>fireAlarm</code> that takes three arguments and returns a
    boolean value indicating whether the fire alarm should go off.
  </p>

  <p>The values of the arguments will be booleans indicating, in order, whether
    a fire alarm was pulled, whether smoke was detected, and whether there is a
    planned fire drill.
  </p>
</div>

<div>
  <p>
    There are three criteria for a person to be eligible to be elected president
    of the United States: they must be at least 35 years old, they must be a
    natural born citizen, and they must have lived in the US for at least
    fourteen years. A person must meet all these criteria to be eligible.
  </p>
  <p>
    Write a function named <code>canBePresident</code> that takes three
    arguments, and returns true if a person can be president. The first argument
    is the persons age in years; the second, a boolean indicating whether or not
    they are a natural born citizen; and the third, the number of years they’ve
    lived in the US.
  </p>
</div>

<div>
  <p>
    On Twitter, a user should see a tweet if they follow the person who tweeted
    it or if they follow a person who retweeted it. However they should never
    see a tweet from someone they have blocked.
  </p>

  <p>
    Write a function named <code>willSeeTweet</code> that returns a boolean
    indicating whether a user should see a given tweet according to the values
    of it’s three boolean arguments. The first says whether they follow the
    tweeter; the second, whether they follow someone who retweeted the tweet;
    and the third, whether they have blocked the original tweeter.
  </p>
</div>

<div>
  <p>
    Write a function named <code>evenGreaterThanZero</code> that takes a single
    numeric argument and returns a boolean indicating whether the number is an
    even number greater than zero.
  </p>
</div>

<div>
  <p>
    The rules for leap years are more complex than you may know. The basic rule
    is that all years evenly divisible by 4 (i.e. <code>year % 4 === 0</code>)
    are leap years. However, years evenly divisible by 100 are <em>not</em> leap
    years <em>unless</em> they are evenly divisible by 400. Thus 2004 was a leap
    year by the normal rule but 2100 will not be because it’s divisible by 100.
    But 2000 was because although it was divisible by 100 it was also divisible
    by 400.
  </p>

  <p>
    Write a function named <code>isLeapYear</code> that takes a single argument
    of a year number and returns a boolean indicating whether or not it is a
    leap year.
  </p>
</div>

<!-- strings -->

<div>
  <p>
    Write a function named <code>firstAndLast</code> that takes a single string
    argument (which will be at least two characters long) and returns a string
    consisting of just the first and last characters of the string.
  </p>
</div>

<div>
  <p>
    Write a function named <code>swapFrontAndBack</code> that takes a single
    string argument and returns a string consisting of the second half of the
    original string followed by the first half. If the string is an odd number
    of characters it doesn’t matter whether the extra character goes with the
    front or the back.
  </p>
</div>

<div>
  <p>
    As you should recall from the Pig Latin assignment, the rules of simple Pig
    Latin say that a word is translated into Pig Latin by taking everything up
    to (but not including) the first vowel and moving it to the end of word and
    then adding “ay” to the end.
  </p>

  <p>
    Write a function named <code>simplePigLatin</code> that takes two arguments,
    a string containing a single word and a number indicating the index of the
    first vowel in the word, and returns the word translated into Pig Latin.
  </p>
</div>

<div>
  <p>
    Write a function named <code>randomCharacter</code> that takes a single
    string argument and returns a random character from the string. For this
    function you will need to use the <code>rand</code> function defined at the
    top of the starter code.
  </p>
</div>

<div>
  <p>
    Write a function named <code>randomCharacterUpDown</code> that takes a
    single string argument and returns a string consisting of a single random
    character repeated twice, once in upper case and then in lower case. For
    this function you will need to use the <code>rand</code> function defined at
    the top of the starter code.
  </p>
</div>

<!-- combined -->

<div>
  <p>
    Write a function named <code>isAllUpperCase</code> that takes a single
    string argument and returns a boolean indicating whether the string is all
    upper case.
  </p>
</div>

<div>
  <p>
    Write a function named <code>sameIgnoringCase</code> that takes two string
    arguments and returns a boolean indicating whether they are the same string
    if you ignore case differences.
  </p>
</div>
{% endblock %}
