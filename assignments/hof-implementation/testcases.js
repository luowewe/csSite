const testcases = (() => {
  return {
    referenceImpls: {
      filter: (fn, xs) => xs.filter(fn),
      map: (fn, xs) => xs.map(fn),
      flatMap: (fn, xs) => xs.flatMap(fn),
      reduce: (fn, initialValue, xs) => xs.reduce(fn, initialValue),
      every: (p, xs) => xs.every(p),
      some: (p, xs) => xs.some(p),
    },

    allCases: {
      filter: [
        [(n) => n % 2 === 0, [1, 2, 3, 4, 5, 6]],
        [(n) => n % 2 === 0, []],
        [(n) => n % 2 === 0, [1, 3, 5, 7]],
        [(n) => n % 2 === 0, [2, 4, 6, 8]],
      ],
      map: [
        [(n) => n ** 2, [1, 2, 3, 4]],
        [(n) => n ** 2, []],
        [(n) => n ** 2, [-1, -2, -3, -4]],
      ],
      reduce: [
        [(tot, n) => tot + n, 0, [1, 2, 3, 4]],
        [(tot, n) => tot + n, 0, []],
        [(tot, n) => tot + n, 42, [1, 2, 3, 4]],
        [(tot, n) => tot + n, 42, []],
        [(tot, n) => tot * n, 1, [1, 2, 3, 4]],
        [(tot, n) => tot * n, 1, []],
      ],
      flatMap: [
        [(n) => [n, n], [1, 2, 3, 4]],
        [(n) => [n, n + 1], [1, 2, 3, 4]],
        [(n) => [n, n + 1], [2, 3, 5, 7, 11]],
        [(n) => [n, n], []],
        [(n) => (n % 2 === 0 ? [n, n] : []), [1, 2, 3, 4]],
        [(n) => [], [1, 2, 3, 4]],
      ],
      every: [
        [(n) => n % 2 === 0, [1, 2, 3, 4]],
        [(n) => n % 2 === 0, [2, 4, 6, 8]],
        [(n) => n % 2 === 0, [1, 3, 5, 7]],
        [(n) => n % 2 !== 0, [1, 2, 3, 4]],
        [(n) => n % 2 !== 0, [2, 4, 6, 8]],
        [(n) => n % 2 !== 0, [1, 3, 5, 7]],
        [(n) => n % 2 === 0, []],
      ],
      some: [
        [(n) => n % 2 === 0, [1, 2, 3, 4]],
        [(n) => n % 2 === 0, [2, 4, 6, 8]],
        [(n) => n % 2 === 0, [1, 3, 5, 7]],
        [(n) => n % 2 !== 0, [1, 2, 3, 4]],
        [(n) => n % 2 !== 0, [2, 4, 6, 8]],
        [(n) => n % 2 !== 0, [1, 3, 5, 7]],
        [(n) => n % 2 === 0, []],
      ],
    },
  };
})();
