const testcases = (() => {
  return {
    referenceImpls: {
      findFnord: (s) => s.indexOf('fnord'),
      stringContains: (s, ss) => s.indexOf(ss) > -1,
      firstAndLast: (s) => s[0] + s[s.length - 1],
      swapFrontAndBack: (s) => s.substring(s.length / 2) + s.substring(0, s.length / 2),
      simplePigLatin: (s, v) => s.substring(v) + s.substring(0, v) + 'ay',
      randomCharacter: (s) => s[rand(s.length)],
      randomCharacterUpDown: (s) => upDown(randomCharacter(s)),
      isAllUpperCase: (s) => s === s.toUpperCase(),
      sameIgnoringCase: (s1, s2) => s1.toLowerCase() === s2.toLowerCase(),
      firstHalf: (s) => s.substring(0, s.length / 2),
      secondHalf: (s) => s.substring(s.length / 2),
      upDown: (s) => s.toUpperCase() + s.toLowerCase(),
      everyOther: (s) => s[0] + s[2] + s[4],
      upDownLastCharacter: (s) => upDown(s[s.length - 1]),
      firstName: (name) => name.substring(0, name.indexOf(' ')),
      lastName: (name) => name.substring(name.indexOf(' ') + 1),
      concatenate: (s1, s2) => s1 + s2,
      firstCharacter: (s) => s[0],
      lastCharacter: (s) => s[s.length - 1],
      allButFirst: (s) => s.substring(1),
      firstThree: (s) => s.substring(0, 3),
      allButFirstAndList: (s) => s.substring(1, s.length - 1),
      lastThree: (s) => s.substring(s.length - 3),
      capitalize: (s) => s[0].toUpperCase() + s.substring(1).toLowerCase(),
      capitalizeFirstThree: (s) => s.substring(0, 3).toUpperCase() + s.substring(3).toLowerCase(),
    },

    allCases: {
      findFnord: [
        ['there is no fnord here'],
        ["there really isn't one here"],
        ['therefnord are twofnord here'],
      ],
      stringContains: [
        ['foobar', 'bar'],
        ['foobar', 'foo'],
        ['foobar', 'foobar'],
        ['foobar', ''],
        ['foobar', 'quux'],
        ['fooba', 'bar'],
        ['bar', 'foobar'],
        ['foo', 'foobar'],
        ['', 'foobar'],
        ['quux', 'foobar'],
        ['fooba', 'bar'],
      ],
      firstAndLast: [['abc'], ['ax'], ['a much longer string']],
      swapFrontAndBack: [['evenstring'], ['oddstring'], [''], ['x']],
      simplePigLatin: [
        ['food', 1],
        ['phone', 2],
        ['orange', 0],
      ],
      isAllUpperCase: [['FOO'], ['bar'], ['FooBar'], ['']],
      sameIgnoringCase: [
        ['FOO', 'foo'],
        ['foo', 'FOO'],
        ['fObAR', 'FoBaR'],
        ['FOO', 'BAR'],
      ],
      firstHalf: [['foobar'], ['fooquux'], [''], ['a'], ['ab'], ['abc']],
      secondHalf: [['foobar'], ['fooquux'], [''], ['a'], ['ab'], ['abc']],
      upDown: [['foobar'], [''], ['a'], ['ab'], ['abc']],
      everyOther: [['foobar'], ['abcde'], ['abcdefgh']],
      upDownLastCharacter: [['foobar'], ['a'], ['ab'], ['abc']],
      firstName: [['Jack Hernandez'], ['Mr. Seibel'], ['Taylor Swift']],
      lastName: [['Jack Hernandez'], ['Mr. Seibel'], ['Taylor Swift']],
      concatenate: [
        ['foo', 'bar'],
        ['', 'foo'],
        ['bar', ''],
        ['', ''],
      ],
      firstCharacter: [['foo'], ['bar'], ['a']],
      lastCharacter: [['foo'], ['bar'], ['a']],
      allButFirst: [['foo'], ['bar'], ['a']],
      firstThree: [['foobar'], ['foo'], ['bar'], ['quux']],
      allButFirstAndList: [['foobar'], ['foo'], ['bar'], ['quux'], ['ab']],
      lastThree: [['foobar'], ['foo'], ['bar'], ['quux']],
      capitalize: [['foobar'], ['foo'], ['bar'], ['quux'], ['FooBar'], ['SpOnGe BoB']],
      capitalizeFirstThree: [['foobar'], ['foo'], ['bar'], ['quux'], ['FooBar'], ['SpOnGe BoB']],
    },
  };
})();
